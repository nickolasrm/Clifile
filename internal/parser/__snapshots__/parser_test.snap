
[Parser when a code is passed when first line is a docstring should parse it as doc - 1]
&program.Program{
    doc:       "Name\n",
    variables: {
    },
    calls: {
    },
    rules: {
    },
}
---

[Parser when a code is passed when first line is a docstring when contains a rule should not parse it as rule docstring - 1]
&program.Program{
    doc:       "Name\nDescr\n",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "Rule\n",
            actions:    "echo \"test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a comment should ignore a comment - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
    },
}
---

[Parser when a code is passed when contains a variable should return a variable - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
        "Var": &variable.Variable{name:"Var", value:"1"},
    },
    calls: {
    },
    rules: {
    },
}
---

[Parser when a code is passed when contains a function call should return a function call - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
        "Rec": &call.Call{
            name:      "Rec",
            function:  "Fn",
            arguments: {},
        },
    },
    rules: {
    },
}
---

[Parser when a code is passed when contains a function call when contains arguments should return a function call with arguments - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
        "Rec": &call.Call{
            name:      "Rec",
            function:  "Fn",
            arguments: {"arg":"1", "arg2":"2"},
        },
    },
    rules: {
    },
}
---

[Parser when a code is passed when contains a function call when contains arguments when contains an invalid token should return an error - 1]
&errors.errorString{s:"unexpected syntax inside function call near 'arg3'"}
---

[Parser when a code is passed when contains a function call when contains arguments when contains a comment should ignore the comment - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
        "Rec": &call.Call{
            name:      "Rec",
            function:  "Fn",
            arguments: {"arg":"1", "arg2":"2"},
        },
    },
    rules: {
    },
}
---

[Parser when a code is passed when doesn't contain a rule when contains an action should return an error - 1]
&errors.errorString{s:"action outside of rule near 'echo \"Test\"'"}
---

[Parser when a code is passed when contains a rule when contains positional parameters should return rule with positional params - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: {"param1", "param2"},
            doc:        "",
            actions:    "echo \"test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action should return a rule with an action - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "echo \"Test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains an indented variable should return a rule with an action - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "Var=1\necho \"Test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains an indented function call should return a rule with an action - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "Rec=${Fn}\necho \"Test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple actions should return a rule with multiple actions - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "echo \"Test\"\necho \"Test2\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when preceded by a docstring should return a rule with an action and a docstring - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "This is a docstring\n",
            actions:    "echo \"Test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when preceded by a docstring when more than one docstring should concatenate the docstrings into one - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "This is a docstring\nThis is another docstring\n",
            actions:    "echo \"Test\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when preceded by a docstring when docstring is overly indented should return an error - 1]
&errors.errorString{s:"overly indented docstring near '## This is a docstring'"}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules should return multiple rules - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "echo \"Test\"\n",
            rules:      {
            },
        },
        "rule2": &rule.Rule{
            name:       "rule2",
            positional: nil,
            doc:        "",
            actions:    "echo \"Test2\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested should return a rule with a nested rule - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "",
            rules:      {
                "rule2": &rule.Rule{
                    name:       "rule2",
                    positional: nil,
                    doc:        "",
                    actions:    "echo \"Test2\"\n",
                    rules:      {
                    },
                },
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested when another rule is nested and a group appears after should return a rule with a nested rule and a group - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "",
            rules:      {
                "rule2": &rule.Rule{
                    name:       "rule2",
                    positional: nil,
                    doc:        "",
                    actions:    "echo \"Test2\"\n",
                    rules:      {
                    },
                },
                "rule3": &rule.Rule{
                    name:       "rule3",
                    positional: nil,
                    doc:        "",
                    actions:    "echo \"Test3\"\n",
                    rules:      {
                    },
                },
            },
        },
        "rule4": &rule.Rule{
            name:       "rule4",
            positional: nil,
            doc:        "",
            actions:    "echo \"Test4\"\n",
            rules:      {
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested when deeply nested should return a rule with a nested rule and a group - 1]
&program.Program{
    doc:       "Software Command Line Interface (CLI)\nUse this as shortcut for user-defined commands",
    variables: {
    },
    calls: {
    },
    rules: {
        "rule": &rule.Rule{
            name:       "rule",
            positional: nil,
            doc:        "",
            actions:    "",
            rules:      {
                "rule2": &rule.Rule{
                    name:       "rule2",
                    positional: nil,
                    doc:        "",
                    actions:    "",
                    rules:      {
                        "rule3": &rule.Rule{
                            name:       "rule3",
                            positional: nil,
                            doc:        "",
                            actions:    "",
                            rules:      {
                                "rule4": &rule.Rule{
                                    name:       "rule4",
                                    positional: nil,
                                    doc:        "",
                                    actions:    "echo \"Test4\"\n",
                                    rules:      {
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
    },
}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested when more than two tabs are used should return an error - 1]
&errors.errorString{s:"overly indented rule near 'rule3:'"}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested when an action appears in the group rule when the action appears before the nested rule should return an error - 1]
&errors.errorString{s:"can't add nested rules into a rule 'rule' because it has actions"}
---

[Parser when a code is passed when contains a rule when contains an action when contains multiple rules when a rule is nested when an action appears in the group rule when the action appears after the nested rule should return an error - 1]
&errors.errorString{s:"bad indentation near 'echo \"Test\"'"}
---

[Parser when a code is passed when a full example appeared should parse multiple matches - 1]
&program.Program{
    doc:       "Name\nDescr\niption\n",
    variables: {
        "VAR":  &variable.Variable{name:"VAR", value:"abd"},
        "VAR2": &variable.Variable{name:"VAR2", value:"def\ndfg"},
    },
    calls: {
        "FLAG1": &call.Call{
            name:      "FLAG1",
            function:  "fn1",
            arguments: {"x":"y", "z":"d"},
        },
        "FLAG2": &call.Call{
            name:      "FLAG2",
            function:  "fn2",
            arguments: {},
        },
    },
    rules: {
        "grp1": &rule.Rule{
            name:       "grp1",
            positional: {"FLAG2", "FLAG1"},
            doc:        "",
            actions:    "",
            rules:      {
                "cmd2": &rule.Rule{
                    name:       "cmd2",
                    positional: nil,
                    doc:        "",
                    actions:    "VARSHELL=2\necho \"test\"\n",
                    rules:      {
                    },
                },
                "cmd3": &rule.Rule{
                    name:       "cmd3",
                    positional: nil,
                    doc:        "Documentation\n",
                    actions:    "sed ${FLAG1}\n",
                    rules:      {
                    },
                },
            },
        },
        "grp2": &rule.Rule{
            name:       "grp2",
            positional: nil,
            doc:        "Documentation\nDoc\n",
            actions:    "",
            rules:      {
                "cmd1": &rule.Rule{
                    name:       "cmd1",
                    positional: nil,
                    doc:        "Documentation\nDoc\n",
                    actions:    "hey ${VAR1}\n",
                    rules:      {
                    },
                },
            },
        },
    },
}
---
